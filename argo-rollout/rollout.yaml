apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: flask
  namespace: flask
  labels:
    app: flask
spec:
  # do not include replicas in the manifests if you want replicas to be controlled by HPA
  # replicas: 2
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      serviceAccountName: flask
      containers:
        - name: flask
          image: <IMAGE TAG>
          ports:
            - containerPort: 8080
          # env:
          #   - name: TEST
          #     value: "Hello, World!"
          resources:
            requests:
              cpu: "250m"
              memory: "250Mi"
            limits:
              cpu: "500m"
              memory: "500Mi"
          # command:  # override Dockerfile `ENTRYPOINT`
          #   - ""
          #   - ""
          # args:     # override Dockerfile `CMD`
          #   - ""
          #   - ""
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 2
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 2"]
          # volumeMounts:
          #   - name: volume-1
          #     mountPath: "/mnt/volume-1"
          #     readOnly: true
      terminationGracePeriodSeconds: 3
      # volumes:
      #   - name: volume-1
      #     emptyDir: {}
      tolerations:
        - key: "type"         # taint key
          value: "flask"     # taint value
          operator: "Equal"
          effect: "NoSchedule"
      nodeSelector:
        type: flask            # node label key and value
      topologySpreadConstraints:
        - maxSkew: 1
          whenUnsatisfiable: DoNotSchedule
          topologyKey: topology.kubernetes.io/zone
          labelSelector:
            matchLabels:
              app: flask
  strategy:
    canary:
      canaryService: flask-canary
      stableService: flask-stable
      trafficRouting:
        alb:
          ingress: flask
          rootService: flask-root
          servicePort: 8080
      steps:
        - setWeight: 20
        - pause: {duration: 10s}
        - setWeight: 40
        - pause: {duration: 10s}
        - setWeight: 60
        - pause: {duration: 10s}
        - setWeight: 80
        - pause: {duration: 10s}